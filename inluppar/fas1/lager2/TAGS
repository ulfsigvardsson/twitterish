
analysis.c,15
int main(6,74

file.c,57
int db_size(9,113
int load_db(18,200
int main(53,1006

item.c,1067
struct item 7,80
  char *name;name8,94
  char *descr;descr9,108
  int price;10,123
  list_t *shelves;shelves11,136
struct shelf17,203
  char *id;id19,218
  int amount;20,250
shelf_t *shelf_new(shelf_new23,306
shelf_t *shelf_empty(shelf_empty32,457
item_t *item_new(item_new38,540
void item_add_shelf(52,847
void item_set_name(57,937
void item_set_description(63,1019
void item_set_price(74,1177
void item_set_shelf(80,1261
void item_set_shelves(86,1345
char *item_name(item_name91,1430
char *item_descr(item_descr96,1486
int item_price(101,1544
list_t *item_shelves(item_shelves106,1600
char *shelf_id(shelf_id112,1690
void set_shelf_id(118,1772
int shelf_amount(123,1839
void shelf_set_amount(127,1901
void shelf_add_amount(131,1981
int shelf_compare(140,2138
int item_compare(150,2426
void item_free(160,2700
void shelf_free_aux(175,2972
void key_free(184,3080
void shelf_free(190,3147
elem_t shelf_copy(196,3258
elem_t item_copy(202,3359
elem_t shelf_deep_copy(208,3410
item_t *item_deep_copy(item_deep_copy222,3690

lager.c,2023
#define MainMenuChoice 11,175
#define AskName 12,258
#define AskDescription 13,309
#define AskPrice 14,374
#define AskShelf 15,423
#define AskAmount 16,480
#define ConfirmAddition 17,542
#define AskRemoveShelf 18,650
#define ShelfIsInList 19,728
#define AskWhatToEdit 20,792
typedef enum last_action 27,1175
typedef enum last_action {NOTHING,NOTHING27,1175
typedef enum last_action {NOTHING, ADD,27,1175
typedef enum last_action {NOTHING, ADD, REMOVE,27,1175
typedef enum last_action {NOTHING, ADD, REMOVE, EDIT}EDIT27,1175
typedef enum last_action {NOTHING, ADD, REMOVE, EDIT} last_action_t;27,1175
typedef struct undo_action29,1245
    elem_t added;31,1276
    elem_t removed;32,1294
    elem_t edit_old;33,1314
    elem_t edit_new;34,1335
    last_action_t last_action;35,1356
  } undo_action_t;36,1387
void undo_reset(44,1654
void undo_free(68,2283
undo_action_t *undo_new(undo_new85,2638
void print_main_menu(93,2800
bool print_shelf(106,3226
void print_shelves(114,3414
void print_item(123,3605
int select_existing_shelf(140,4086
bool shelf_is_equal(167,4742
bool shelf_is_in_list(188,5351
char *find_available_shelf(find_available_shelf205,5845
void merge_shelves(230,6410
void edit_shelf_name(249,7063
void edit_shelves(269,7524
void edit_description(291,8076
void edit_price(301,8417
void edit_item_aux(314,8845
char *find_free_shelf(find_free_shelf338,9262
void remove_shelves(344,9354
void db_remove_item(366,10037
void add_existing_item(407,11177
void db_add_item(443,12204
void undo_last_action(510,13840
void list_20_items(553,14925
bool list_db(566,15246
int *index_menu_choices(index_menu_choices603,16065
bool valid_index(613,16388
elem_t select_by_index(624,16686
void list_and_select_item(654,17270
void edit_item(664,17459
void edit_db(682,17898
void db_check_sorting(695,18126
int db_size(701,18220
bool write_item_to_file(708,18305
void save_db(730,18934
tree_t *load_db(load_db740,19198
void event_loop(783,20290
int main(810,20951

list.c,839
typedef struct link link_t;3,19
struct link5,48
  elem_t elem;7,62
  link_t *next;next8,77
struct list11,97
  link_t *first;first13,111
  link_t *last;last14,128
  element_copy_fun copy_f;15,144
  element_free_fun free_f;16,171
  element_comp_fun cmp_f;17,198
  size_t size;18,224
elem_t list_no_copy(22,244
list_t *list_new(list_new36,702
link_t *link_new(link_new47,981
int adjust_index_insert(55,1161
int adjust_index_get(76,1598
link_t **list_find(list_find97,2025
void make_singleton(109,2264
void list_insert(128,2973
bool empty_list(154,3562
void list_append(166,3941
void list_prepend(192,4755
bool list_get(203,5128
bool list_first(225,5687
bool list_last(232,5854
int list_length(247,6288
void list_remove(263,6782
void list_delete(285,7272
bool list_apply(302,7758
int list_contains(326,8367

shelfinfo.c,495
struct shelf_info 3,24
  bool exists;4,44
  enum owner owner;5,59
  char *item_name;item_name6,79
  char *shelf_id;shelf_id7,98
shelf_info_t *shelf_info_new(shelf_info_new10,121
shelf_info_t *info_initiate(info_initiate15,226
bool info_exists(24,439
enum owner info_owner(28,504
char *info_name(info_name32,573
char *info_id(info_id36,640
void set_info_exists(40,704
void set_info_owner(44,782
void set_info_name(48,868
void set_info_id(52,950
void set_shelf_owner(56,1025

test.c,627
int tree_compare_int(8,102
elem_t string_copy(16,231
int comp_fun_string(23,314
void list_insert_test(30,438
void list_new_test(55,1117
void list_append_test(61,1219
void list_prepend_test(80,1728
void list_get_test(104,2248
void list_first_test(125,2732
void list_last_test(144,3186
void list_remove_test(160,3635
bool list_apply_fun(183,4334
void list_apply_test(191,4441
void list_contains_test(205,4745
void tree_new_test(223,5267
void tree_insert_test(229,5376
void tree_height_test(247,5753
void tree_get_test(276,6457
void tree_remove_test(305,7238
void tree_balance_test(343,8198
int main(383,9211

tree.c,1524
#define Compare(4,39
#define Compare_keys 5,82
#define Comp 6,131
#define Copy 7,156
#define Free_elem 8,182
#define Free_key 9,215
#define Apply_key 10,247
#define Apply_left 11,298
#define Apply_right 12,367
#define Is_leaf 13,438
#define Leaf 14,499
#define Full 15,557
#define Right 16,612
#define Left 17,646
struct node19,681
  elem_t elem;21,695
  tree_key_t key;22,710
  node_t *left;left23,728
  node_t *right;right24,744
struct tree27,765
  node_t *root;root29,779
  element_copy_fun copy_f;30,795
  element_free_fun e_free_f;31,822
  key_free_fun k_free_f;32,851
  element_comp_fun cmp_f;33,876
  size_t size;34,902
void *get_root_elem(get_root_elem38,922
elem_t tree_no_copy(43,992
void tree_no_free(48,1047
int tree_no_compare(53,1093
node_t *node_new(node_new63,1257
tree_t *tree_new(tree_new76,1674
void tree_delete(100,2411
int tree_size(122,2931
int max(128,3028
int tree_depth_aux(133,3079
int tree_depth(146,3347
node_t **tree_traverse(tree_traverse159,3699
int get_balance(180,4029
void build_tree_aux(186,4156
tree_t *tree_balance(tree_balance202,4592
bool tree_insert(234,5620
bool tree_has_key(269,6410
bool tree_get(281,6798
void free_node(297,7045
node_t **find_smallest_successor(find_smallest_successor305,7221
bool tree_remove(320,7628
void tree_keys_aux(364,8881
tree_key_t *tree_keys(tree_keys381,9287
void tree_elements_aux(390,9489
elem_t *tree_elements(tree_elements407,9971
bool node_apply(416,10173
bool tree_apply(468,11488

utils.c,790
  int   i;4,36
  float f;5,47
  char *s;s6,58
  char c;7,69
} answer_t;8,79
typedef bool(*check_func)check_func11,93
typedef answer_t(*convert_func)convert_func12,128
bool is_menu_choice(29,653
char ask_question_menu(39,857
answer_t make_float(51,1146
double ask_question_float(55,1222
char *ask_question_shelf(ask_question_shelf60,1381
bool is_valid_shelf(67,1587
bool is_float(83,1967
void clear_input_buffer(103,2398
bool not_empty(117,2770
answer_t ask_question(123,2829
int ask_question_int(142,3265
char *ask_question_string(ask_question_string148,3485
char ask_question_char(154,3663
char chardup(159,3805
bool is_single_char(163,3849
void print_menu(167,3910
int read_string(171,3965
bool is_number(198,4659
void print(221,5206
void println(229,5324
