
analysis.c,15
int main(6,74

file.c,57
int db_size(9,113
int load_db(18,200
int main(53,1006

item.c,1081
struct item 7,80
  char *name;name8,94
  char *descr;descr9,108
  int price;10,123
  list_t *shelves;shelves11,136
struct shelf17,203
  char *id;id19,218
  int amount;20,250
shelf_t *shelf_new(shelf_new23,306
shelf_t *shelf_empty(shelf_empty32,457
item_t *item_new(item_new38,540
void item_add_shelf(52,847
void item_set_name(57,937
void item_set_description(68,1086
void item_set_price(80,1318
void item_set_shelf(86,1402
void item_set_shelves(92,1486
char *item_name(item_name97,1571
char *item_descr(item_descr102,1627
void set_item_name(107,1685
int item_price(115,1784
list_t *item_shelves(item_shelves120,1840
char *shelf_id(shelf_id126,1930
void set_shelf_id(132,2012
int shelf_amount(137,2079
void shelf_set_amount(141,2141
void shelf_add_amount(145,2221
int shelf_compare(154,2378
int item_compare(164,2666
void item_free(174,2940
void shelf_free_aux(189,3212
void key_free(198,3320
void shelf_free(208,3438
elem_t shelf_copy(214,3549
elem_t item_copy(220,3650
elem_t shelf_deep_copy(226,3701
elem_t item_deep_copy(240,3981

lager.c,2040
#define MainMenuChoice 11,175
#define AskName 12,258
#define AskDescription 13,309
#define AskPrice 14,374
#define AskShelf 15,423
#define AskAmount 16,480
#define ConfirmAddition 17,542
#define AskRemoveShelf 18,650
#define ShelfIsInList 19,728
#define AskWhatToEdit 20,792
typedef enum last_action 26,1249
typedef enum last_action {NOTHING,NOTHING26,1249
typedef enum last_action {NOTHING, ADD,26,1249
typedef enum last_action {NOTHING, ADD, REMOVE,26,1249
typedef enum last_action {NOTHING, ADD, REMOVE, EDIT}EDIT26,1249
typedef enum last_action {NOTHING, ADD, REMOVE, EDIT} last_action_t;26,1249
typedef struct undo_action28,1319
  elem_t added;30,1348
  elem_t removed;31,1364
  elem_t edit_old;32,1382
  elem_t edit_new;33,1401
  last_action_t last_action;34,1420
} undo_action_t;35,1449
void undo_reset(43,1714
void undo_free(67,2343
undo_action_t *undo_new(undo_new84,2698
void print_main_menu(92,2860
bool print_shelf(105,3286
void print_shelves(113,3474
void print_item(122,3665
int select_existing_shelf(139,4146
bool shelf_is_equal(166,4802
bool shelf_is_in_list(187,5411
char *find_available_shelf(find_available_shelf204,5905
void merge_shelves(229,6470
void edit_shelf_name(248,7123
void edit_shelves(268,7584
void edit_description(290,8115
void edit_price(300,8456
void edit_name(309,8774
void edit_item_aux(320,9200
char *find_free_shelf(find_free_shelf361,10177
void remove_shelves(367,10269
void db_remove_item(389,10952
void add_existing_item(432,12108
void db_add_item(469,13142
void undo_last_action(536,14772
void list_20_items(580,15864
bool list_db(593,16199
int *index_menu_choices(index_menu_choices630,17018
bool valid_index(640,17341
elem_t select_by_index(651,17639
void list_and_select_item(681,18223
void edit_item(692,18413
void edit_db(710,18806
void db_check_sorting(723,19034
  int db_size(739,19322
bool write_item_to_file(746,19417
void save_db(768,20046
tree_t *load_db(load_db777,20238
void event_loop(820,21336
int main(850,22083

list.c,839
typedef struct link link_t;3,19
struct link5,48
  elem_t elem;7,62
  link_t *next;next8,77
struct list11,97
  link_t *first;first13,111
  link_t *last;last14,128
  element_copy_fun copy_f;15,144
  element_free_fun free_f;16,171
  element_comp_fun cmp_f;17,198
  size_t size;18,224
elem_t list_no_copy(22,244
list_t *list_new(list_new36,702
link_t *link_new(link_new47,981
int adjust_index_insert(55,1161
int adjust_index_get(76,1598
link_t **list_find(list_find97,2025
void make_singleton(109,2264
void list_insert(128,2973
bool empty_list(154,3562
void list_append(166,3941
void list_prepend(192,4755
bool list_get(203,5128
bool list_first(225,5687
bool list_last(232,5854
int list_length(247,6288
void list_remove(263,6782
void list_delete(285,7272
bool list_apply(302,7758
int list_contains(326,8367

shelfinfo.c,495
struct shelf_info 3,24
  bool exists;4,44
  enum owner owner;5,59
  char *item_name;item_name6,79
  char *shelf_id;shelf_id7,98
shelf_info_t *shelf_info_new(shelf_info_new10,121
shelf_info_t *info_initiate(info_initiate15,226
bool info_exists(24,439
enum owner info_owner(28,504
char *info_name(info_name32,573
char *info_id(info_id36,640
void set_info_exists(40,704
void set_info_owner(44,782
void set_info_name(48,868
void set_info_id(52,950
void set_shelf_owner(56,1025

test.c,1054
int tree_compare_int(9,120
elem_t string_copy(17,249
int comp_fun_string(24,332
void list_insert_test(31,456
void list_new_test(56,1135
void list_append_test(62,1237
void list_prepend_test(81,1746
void list_get_test(105,2266
void list_first_test(126,2750
void list_last_test(145,3204
void list_remove_test(161,3653
bool list_apply_fun(184,4352
void list_apply_test(192,4459
void list_contains_test(206,4763
void tree_new_test(224,5285
void tree_insert_test(230,5394
void tree_height_test(248,5771
void tree_get_test(277,6475
void tree_remove_test(306,7256
void tree_balance_test(344,8216
void item_new_test(385,9230
void item_set_name_test(406,9838
void item_set_description_test(413,10003
void item_set_price_test(420,10183
void shelf_new_test(427,10334
void item_set_shelf_test(434,10500
void shelf_add_amount_test(448,10811
void item_set_shelves_test(455,10963
void shelf_compare_test(476,11735
void item_compare_test(486,12019
void shelf_deep_copy_test(496,12250
void item_deep_copy_test(505,12520
int main(528,13384

tree.c,1509
#define Compare(4,39
#define Compare_keys 5,82
#define Comp 6,131
#define Copy 7,156
#define Free_elem 8,182
#define Free_key 9,215
#define Apply_key 10,247
#define Apply_left 11,298
#define Apply_right 12,367
#define Is_leaf 13,438
#define Leaf 14,499
#define Full 15,557
#define Right 16,612
#define Left 17,646
struct node19,681
  elem_t elem;21,695
  tree_key_t key;22,710
  node_t *left;left23,728
  node_t *right;right24,744
struct tree27,765
  node_t *root;root29,779
  element_copy_fun copy_f;30,795
  element_free_fun e_free_f;31,822
  key_free_fun k_free_f;32,851
  element_comp_fun cmp_f;33,876
  size_t size;34,902
void *get_root_elem(get_root_elem38,922
elem_t tree_no_copy(43,992
void tree_no_free(48,1047
int tree_no_compare(53,1093
node_t *node_new(node_new63,1257
tree_t *tree_new(tree_new76,1674
void tree_delete(100,2411
int tree_size(127,2954
int max(133,3051
int tree_depth_aux(138,3102
int tree_depth(151,3370
node_t **tree_traverse(tree_traverse164,3722
int get_balance(185,4052
void build_tree_aux(192,4208
void tree_balance(209,4652
bool tree_insert(241,5714
bool tree_has_key(276,6504
bool tree_get(288,6892
void free_node(304,7139
node_t **find_smallest_successor(find_smallest_successor312,7315
bool tree_remove(327,7722
void tree_keys_aux(372,9014
tree_key_t *tree_keys(tree_keys389,9420
void tree_elements_aux(398,9622
elem_t *tree_elements(tree_elements415,10104
bool node_apply(424,10306
bool tree_apply(476,11621

utils.c,790
  int   i;4,36
  float f;5,47
  char *s;s6,58
  char c;7,69
} answer_t;8,79
typedef bool(*check_func)check_func11,93
typedef answer_t(*convert_func)convert_func12,128
bool is_menu_choice(29,653
char ask_question_menu(39,857
answer_t make_float(51,1146
double ask_question_float(55,1222
char *ask_question_shelf(ask_question_shelf60,1381
bool is_valid_shelf(67,1587
bool is_float(83,1967
void clear_input_buffer(103,2398
bool not_empty(117,2770
answer_t ask_question(123,2829
int ask_question_int(142,3265
char *ask_question_string(ask_question_string148,3485
char ask_question_char(154,3663
char chardup(159,3805
bool is_single_char(163,3849
void print_menu(167,3910
int read_string(171,3965
bool is_number(198,4659
void print(221,5206
void println(229,5324
