
analysis.c,15
int main(6,74

file.c,69
int db_size(9,113
tree_t *load_db(load_db18,200
int main(60,1317

item.c,1067
struct item 7,80
  char *name;name8,94
  char *descr;descr9,108
  int price;10,123
  list_t *shelves;shelves11,136
struct shelf17,203
  char *id;id19,218
  int amount;20,250
shelf_t *shelf_new(shelf_new23,306
shelf_t *shelf_empty(shelf_empty32,457
item_t *item_new(item_new38,540
void item_add_shelf(52,847
void item_set_name(57,937
void item_set_description(63,1019
void item_set_price(74,1177
void item_set_shelf(80,1261
void item_set_shelves(86,1345
char *item_name(item_name91,1430
char *item_descr(item_descr96,1486
int item_price(101,1544
list_t *item_shelves(item_shelves106,1600
char *shelf_id(shelf_id112,1690
void set_shelf_id(118,1772
int shelf_amount(123,1839
void shelf_set_amount(127,1901
void shelf_add_amount(131,1981
int shelf_compare(140,2138
int item_compare(150,2426
void item_free(160,2700
void shelf_free_aux(175,2972
void key_free(184,3080
void shelf_free(190,3152
elem_t shelf_copy(196,3263
elem_t item_copy(202,3364
elem_t shelf_deep_copy(208,3415
item_t *item_deep_copy(item_deep_copy220,3674

lager.c,1814
#define MainMenuChoice 11,175
#define AskName 12,258
#define AskDescription 13,309
#define AskPrice 14,374
#define AskShelf 15,423
#define AskAmount 16,480
#define ConfirmAddition 17,542
#define AskRemoveShelf 18,650
#define ShelfIsInList 19,728
#define AskWhatToEdit 20,792
typedef enum last_action 27,1175
typedef enum last_action {NOTHING,NOTHING27,1175
typedef enum last_action {NOTHING, ADD,27,1175
typedef enum last_action {NOTHING, ADD, REMOVE,27,1175
typedef enum last_action {NOTHING, ADD, REMOVE, EDIT}EDIT27,1175
typedef enum last_action {NOTHING, ADD, REMOVE, EDIT} last_action_t;27,1175
typedef struct undo_action29,1245
    elem_t new;31,1276
    elem_t old;32,1292
    last_action_t last_action;33,1308
  } undo_action_t;34,1339
void undo_reset(42,1606
void undo_free(65,2203
undo_action_t *undo_new(undo_new82,2542
void print_main_menu(94,2792
bool print_shelf(107,3218
void print_shelves(115,3406
void print_item(124,3597
int select_existing_shelf(141,4078
bool shelf_is_equal(168,4734
bool shelf_is_in_list(189,5343
char *find_available_shelf(find_available_shelf206,5837
void merge_shelves(231,6402
void edit_shelf_name(250,7055
void edit_shelves(269,7496
void edit_description(291,8023
void edit_price(301,8364
void edit_item_aux(314,8792
char *find_free_shelf(find_free_shelf338,9209
void remove_shelves(344,9301
void db_remove_item(366,9984
void add_existing_item(401,10941
void db_add_item(437,11968
void undo_last_action(503,13573
void list_20_items(548,14589
bool list_db(561,14910
char *index_menu_choices(index_menu_choices598,15729
elem_t select_by_index(617,16290
void list_and_select_item(642,16879
void edit_item(652,17068
void edit_db(670,17497
void db_check_sorting(683,17722
void event_loop(688,17802
int main(714,18460

list.c,839
typedef struct link link_t;3,19
struct link5,48
  elem_t elem;7,62
  link_t *next;next8,77
struct list11,97
  link_t *first;first13,111
  link_t *last;last14,128
  element_copy_fun copy_f;15,144
  element_free_fun free_f;16,171
  element_comp_fun cmp_f;17,198
  size_t size;18,224
elem_t list_no_copy(22,244
list_t *list_new(list_new36,702
link_t *link_new(link_new47,981
int adjust_index_insert(55,1161
int adjust_index_get(76,1598
link_t **list_find(list_find97,2025
void make_singleton(109,2264
void list_insert(128,2973
bool empty_list(154,3562
void list_append(166,3941
void list_prepend(192,4755
bool list_get(203,5128
bool list_first(225,5687
bool list_last(232,5854
int list_length(247,6288
void list_remove(263,6782
void list_delete(285,7272
bool list_apply(302,7758
int list_contains(326,8367

shelfinfo.c,495
struct shelf_info 3,24
  bool exists;4,44
  enum owner owner;5,59
  char *item_name;item_name6,79
  char *shelf_id;shelf_id7,98
shelf_info_t *shelf_info_new(shelf_info_new10,121
shelf_info_t *info_initiate(info_initiate15,226
bool info_exists(24,439
enum owner info_owner(28,504
char *info_name(info_name32,573
char *info_id(info_id36,640
void set_info_exists(40,704
void set_info_owner(44,782
void set_info_name(48,868
void set_info_id(52,950
void set_shelf_owner(56,1025

test.c,627
int tree_compare_int(8,102
elem_t string_copy(16,231
int comp_fun_string(23,314
void list_insert_test(30,438
void list_new_test(55,1117
void list_append_test(61,1219
void list_prepend_test(80,1728
void list_get_test(104,2248
void list_first_test(125,2732
void list_last_test(144,3186
void list_remove_test(160,3635
bool list_apply_fun(183,4334
void list_apply_test(191,4441
void list_contains_test(205,4745
void tree_new_test(223,5267
void tree_insert_test(229,5376
void tree_height_test(247,5753
void tree_get_test(276,6457
void tree_remove_test(305,7238
void tree_balance_test(343,8198
int main(383,9211

tree.c,1525
#define Compare(4,39
#define Compare_keys 5,82
#define Comp 6,131
#define Copy 7,156
#define Free_elem 8,182
#define Free_key 9,215
#define Apply_key 10,247
#define Apply_left 11,298
#define Apply_right 12,367
#define Is_leaf 13,438
#define Leaf 14,499
#define Full 15,557
#define Right 16,612
#define Left 17,646
struct node19,681
  elem_t elem;21,695
  tree_key_t key;22,710
  node_t *left;left23,728
  node_t *right;right24,744
struct tree27,765
  node_t *root;root29,779
  element_copy_fun copy_f;30,795
  element_free_fun e_free_f;31,822
  key_free_fun k_free_f;32,851
  element_comp_fun cmp_f;33,876
  size_t size;34,902
void *get_root_elem(get_root_elem38,922
elem_t tree_no_copy(43,992
void tree_no_free(48,1047
int tree_no_compare(53,1093
node_t *node_new(node_new63,1257
tree_t *tree_new(tree_new76,1674
void tree_delete(100,2411
int tree_size(121,2890
int max(127,2987
int tree_depth_aux(132,3038
int tree_depth(145,3306
node_t **tree_traverse(tree_traverse158,3658
int get_balance(179,3988
void build_tree_aux(185,4115
tree_t *tree_balance(tree_balance201,4551
bool tree_insert(233,5579
bool tree_has_key(268,6369
bool tree_get(280,6757
void free_node(296,7004
node_t **find_smallest_successor(find_smallest_successor304,7180
bool tree_remove(319,7587
void tree_keys_aux(362,9119
tree_key_t *tree_keys(tree_keys379,9525
void tree_elements_aux(388,9727
elem_t *tree_elements(tree_elements405,10209
bool node_apply(414,10411
bool tree_apply(466,11726

utils.c,790
  int   i;4,36
  float f;5,47
  char *s;s6,58
  char c;7,69
} answer_t;8,79
typedef bool(*check_func)check_func11,93
typedef answer_t(*convert_func)convert_func12,128
bool is_menu_choice(29,653
char ask_question_menu(39,857
answer_t make_float(51,1146
double ask_question_float(55,1222
char *ask_question_shelf(ask_question_shelf60,1381
bool is_valid_shelf(67,1587
bool is_float(83,1967
void clear_input_buffer(103,2398
bool not_empty(117,2770
answer_t ask_question(123,2829
int ask_question_int(142,3263
char *ask_question_string(ask_question_string148,3483
char ask_question_char(154,3661
char chardup(159,3803
bool is_single_char(163,3847
void print_menu(167,3908
int read_string(171,3963
bool is_number(198,4657
void print(221,5204
void println(229,5322
