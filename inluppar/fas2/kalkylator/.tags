!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Addition	src/expressions/binary/Addition.java	/^  public Addition(SymbolicExpression left, SymbolicExpression right) {$/;"	m	class:Addition
Addition	src/expressions/binary/Addition.java	/^public class Addition extends Binary {$/;"	c
Ans	src/expressions/command/Ans.java	/^  public Ans() {$/;"	m	class:Ans
Ans	src/expressions/command/Ans.java	/^public class Ans extends Command {$/;"	c
Assignment	src/expressions/binary/Assignment.java	/^  public Assignment(SymbolicExpression left, SymbolicExpression right) {$/;"	m	class:Assignment
Assignment	src/expressions/binary/Assignment.java	/^public class Assignment extends Binary {$/;"	c
Atom	src/expressions/atom/Atom.java	/^public abstract class Atom extends SymbolicExpression {$/;"	c
Binary	src/expressions/binary/Binary.java	/^  public Binary(SymbolicExpression left, SymbolicExpression right) {$/;"	m	class:Binary
Binary	src/expressions/binary/Binary.java	/^public abstract class Binary extends SymbolicExpression {$/;"	c
Clear	src/expressions/command/Clear.java	/^  public Clear() {$/;"	m	class:Clear
Clear	src/expressions/command/Clear.java	/^public class Clear extends Command {$/;"	c
Command	src/expressions/command/Command.java	/^public abstract class Command extends SymbolicExpression {$/;"	c
Constant	src/expressions/atom/Constant.java	/^  public Constant(double value) {$/;"	m	class:Constant
Constant	src/expressions/atom/Constant.java	/^public class Constant extends Atom {$/;"	c
Cos	src/expressions/unary/Cos.java	/^  public Cos(SymbolicExpression argument) {$/;"	m	class:Cos
Cos	src/expressions/unary/Cos.java	/^public class Cos extends Unary {$/;"	c
Division	src/expressions/binary/Division.java	/^  public Division(SymbolicExpression left, SymbolicExpression right) {$/;"	m	class:Division
Division	src/expressions/binary/Division.java	/^public class Division extends Binary {$/;"	c
Exp	src/expressions/unary/Exp.java	/^  public Exp(SymbolicExpression argument) {$/;"	m	class:Exp
Exp	src/expressions/unary/Exp.java	/^public class Exp extends Unary {$/;"	c
FLAGS	Makefile	/^FLAGS=-g$/;"	m
JCC	Makefile	/^JCC=javac$/;"	m
JUNIT	Makefile	/^JUNIT=org.junit.runner.JUnitCore$/;"	m
JVM	Makefile	/^JVM=java$/;"	m
Log	src/expressions/unary/Log.java	/^  public Log(SymbolicExpression argument) {$/;"	m	class:Log
Log	src/expressions/unary/Log.java	/^public class Log extends Unary {$/;"	c
Multiplication	src/expressions/binary/Multiplication.java	/^  public Multiplication(SymbolicExpression left, SymbolicExpression right) {$/;"	m	class:Multiplication
Multiplication	src/expressions/binary/Multiplication.java	/^public class Multiplication extends Binary {$/;"	c
Negation	src/expressions/unary/Negation.java	/^  public Negation(SymbolicExpression argument) {$/;"	m	class:Negation
Negation	src/expressions/unary/Negation.java	/^public class Negation extends Unary {$/;"	c
PATHS	Makefile	/^PATHS=-cp "\/usr\/local\/share\/java\/junit4-4.12.jar:\/usr\/local\/share\/java\/hamcrest-core-1.3.jar:src:tests"$/;"	m
Parser	src/symbolic/Parser.java	/^  public Parser() {$/;"	m	class:Parser
Parser	src/symbolic/Parser.java	/^  public Parser(String inputString) {$/;"	m	class:Parser
Parser	src/symbolic/Parser.java	/^public class Parser {$/;"	c
ParserDriver	src/ParserDriver.java	/^class ParserDriver {$/;"	c
Quit	src/expressions/command/Quit.java	/^  public Quit() {$/;"	m	class:Quit
Quit	src/expressions/command/Quit.java	/^public class Quit extends Command {$/;"	c
Sin	src/expressions/unary/Sin.java	/^  public Sin(SymbolicExpression argument) {$/;"	m	class:Sin
Sin	src/expressions/unary/Sin.java	/^public class Sin extends Unary {$/;"	c
Subtraction	src/expressions/binary/Subtraction.java	/^  public Subtraction(SymbolicExpression left, SymbolicExpression right) {$/;"	m	class:Subtraction
Subtraction	src/expressions/binary/Subtraction.java	/^public class Subtraction extends Binary {$/;"	c
Symbolic	src/symbolic/Symbolic.java	/^public class Symbolic {$/;"	c
SymbolicExpression	src/expressions/SymbolicExpression.java	/^public abstract class SymbolicExpression {$/;"	c
SyntaxErrorException	src/exceptions/SyntaxErrorException.java	/^  public SyntaxErrorException() {$/;"	m	class:SyntaxErrorException
SyntaxErrorException	src/exceptions/SyntaxErrorException.java	/^  public SyntaxErrorException(String msg) {$/;"	m	class:SyntaxErrorException
SyntaxErrorException	src/exceptions/SyntaxErrorException.java	/^public class SyntaxErrorException extends RuntimeException {$/;"	c
TestAddition	tests/TestAddition.java	/^public class TestAddition {$/;"	c
TestAtom	tests/TestAtom.java	/^public class TestAtom {$/;"	c
TestDivision	tests/TestDivision.java	/^public class TestDivision {$/;"	c
TestMultiplication	tests/TestMultiplication.java	/^public class TestMultiplication {$/;"	c
TestParser	tests/TestParser.java	/^public class TestParser {$/;"	c
TestRunner	tests/TestRunner.java	/^public class TestRunner {$/;"	c
TestSubtraction	tests/TestSubtraction.java	/^public class TestSubtraction {$/;"	c
TestSuite	tests/TestSuite.java	/^public class TestSuite {$/;"	c
TestUnary	tests/TestUnary.java	/^public class TestUnary {$/;"	c
Unary	src/expressions/unary/Unary.java	/^  public Unary(SymbolicExpression argument) {$/;"	m	class:Unary
Unary	src/expressions/unary/Unary.java	/^public abstract class Unary extends SymbolicExpression {$/;"	c
Variable	src/expressions/atom/Variable.java	/^  public Variable(String identifier) {$/;"	m	class:Variable
Variable	src/expressions/atom/Variable.java	/^public class Variable extends Atom {$/;"	c
Vars	src/expressions/command/Vars.java	/^  public Vars() {$/;"	m	class:Vars
Vars	src/expressions/command/Vars.java	/^public class Vars extends Command {$/;"	c
add	src/symbolic/Symbolic.java	/^  public static SymbolicExpression add(SymbolicExpression left, SymbolicExpression right) {$/;"	m	class:Symbolic
ans	src/expressions/command/Ans.java	/^  private SymbolicExpression ans;$/;"	f	class:Ans	file:
argument	src/expressions/unary/Unary.java	/^  protected SymbolicExpression argument;$/;"	f	class:Unary
assignment	src/symbolic/Parser.java	/^  public SymbolicExpression assignment() throws IOException {$/;"	m	class:Parser
beforeClass	tests/TestAddition.java	/^    public static void beforeClass() {$/;"	m	class:TestAddition
beforeClass	tests/TestAtom.java	/^    public static void beforeClass() {$/;"	m	class:TestAtom
beforeClass	tests/TestDivision.java	/^    public static void beforeClass() {$/;"	m	class:TestDivision
beforeClass	tests/TestMultiplication.java	/^    public static void beforeClass() {$/;"	m	class:TestMultiplication
beforeClass	tests/TestParser.java	/^    public static void beforeClass() {$/;"	m	class:TestParser
beforeClass	tests/TestSubtraction.java	/^    public static void beforeClass() {$/;"	m	class:TestSubtraction
beforeClass	tests/TestUnary.java	/^    public static void beforeClass() {$/;"	m	class:TestUnary
classes	Makefile	/^classes = $(sources:.java=.class)$/;"	m
clear	src/symbolic/Parser.java	/^  public boolean clear() {$/;"	m	class:Parser
command	src/symbolic/Parser.java	/^  public SymbolicExpression command() throws IOException {$/;"	m	class:Parser
commands	src/symbolic/Parser.java	/^  private TreeSet<String> commands = new TreeSet<String>();$/;"	f	class:Parser	file:
consumeToken	src/symbolic/Parser.java	/^  private int consumeToken() throws IOException {$/;"	m	class:Parser	file:
cos	src/symbolic/Symbolic.java	/^  public static SymbolicExpression cos(SymbolicExpression arg) {$/;"	m	class:Symbolic
count	tests/TestAddition.java	/^    static int count;$/;"	f	class:TestAddition
count	tests/TestAtom.java	/^    static int count;$/;"	f	class:TestAtom
count	tests/TestDivision.java	/^    static int count;$/;"	f	class:TestDivision
count	tests/TestMultiplication.java	/^    static int count;$/;"	f	class:TestMultiplication
count	tests/TestParser.java	/^    static int count;$/;"	f	class:TestParser
count	tests/TestSubtraction.java	/^    static int count;$/;"	f	class:TestSubtraction
count	tests/TestUnary.java	/^    static int count;$/;"	f	class:TestUnary
countUp	tests/TestAddition.java	/^    public void countUp() {$/;"	m	class:TestAddition
countUp	tests/TestAtom.java	/^    public void countUp() {$/;"	m	class:TestAtom
countUp	tests/TestDivision.java	/^    public void countUp() {$/;"	m	class:TestDivision
countUp	tests/TestMultiplication.java	/^    public void countUp() {$/;"	m	class:TestMultiplication
countUp	tests/TestParser.java	/^    public void countUp() {$/;"	m	class:TestParser
countUp	tests/TestSubtraction.java	/^    public void countUp() {$/;"	m	class:TestSubtraction
countUp	tests/TestUnary.java	/^    public void countUp() {$/;"	m	class:TestUnary
currentToken	src/symbolic/Parser.java	/^  private int currentToken() throws IOException {$/;"	m	class:Parser	file:
currentTokenIs	src/symbolic/Parser.java	/^  private boolean currentTokenIs(int token) throws IOException {$/;"	m	class:Parser	file:
currentTokenIs	src/symbolic/Parser.java	/^  private boolean currentTokenIs(int[] tokens) throws IOException {$/;"	m	class:Parser	file:
currentTokenIsACommand	src/symbolic/Parser.java	/^  private boolean currentTokenIsACommand() throws IOException {$/;"	m	class:Parser	file:
currentTokenIsAUnary	src/symbolic/Parser.java	/^  private boolean currentTokenIsAUnary() throws IOException {$/;"	m	class:Parser	file:
currentTokenIsNumber	src/symbolic/Parser.java	/^  private boolean currentTokenIsNumber() throws IOException {$/;"	m	class:Parser	file:
currentTokenIsWord	src/symbolic/Parser.java	/^  private boolean currentTokenIsWord() throws IOException {$/;"	m	class:Parser	file:
didGetSyntaxError	src/symbolic/Parser.java	/^  private void didGetSyntaxError() throws IOException {$/;"	m	class:Parser	file:
didStartInInteractiveMode	src/ParserDriver.java	/^  public static void didStartInInteractiveMode() {$/;"	m	class:ParserDriver
didStartWithCommandLineArgument	src/ParserDriver.java	/^  public static void didStartWithCommandLineArgument(String[] args) {$/;"	m	class:ParserDriver
div	src/symbolic/Symbolic.java	/^  public static SymbolicExpression div(SymbolicExpression left, SymbolicExpression right) {$/;"	m	class:Symbolic
endSymbol	src/symbolic/Parser.java	/^  private int endSymbol;$/;"	f	class:Parser	file:
eval	src/expressions/SymbolicExpression.java	/^  public abstract SymbolicExpression eval(HashMap<String,SymbolicExpression> variables);$/;"	m	class:SymbolicExpression
eval	src/expressions/atom/Constant.java	/^  public SymbolicExpression eval(HashMap<String,SymbolicExpression> variables) {$/;"	m	class:Constant
eval	src/expressions/atom/Variable.java	/^  public SymbolicExpression eval(HashMap<String,SymbolicExpression> variables) {$/;"	m	class:Variable
eval	src/expressions/binary/Addition.java	/^  public SymbolicExpression eval(HashMap<String,SymbolicExpression> variables) {$/;"	m	class:Addition
eval	src/expressions/binary/Assignment.java	/^  public SymbolicExpression eval(HashMap<String,SymbolicExpression> variables) {$/;"	m	class:Assignment
eval	src/expressions/binary/Division.java	/^  public SymbolicExpression eval(HashMap<String,SymbolicExpression> variables) {$/;"	m	class:Division
eval	src/expressions/binary/Multiplication.java	/^  public SymbolicExpression eval(HashMap<String,SymbolicExpression> variables) {$/;"	m	class:Multiplication
eval	src/expressions/binary/Subtraction.java	/^  public SymbolicExpression eval(HashMap<String,SymbolicExpression> variables) {$/;"	m	class:Subtraction
eval	src/expressions/command/Ans.java	/^  public SymbolicExpression eval(HashMap<String,SymbolicExpression> variables) {$/;"	m	class:Ans
eval	src/expressions/command/Clear.java	/^  public SymbolicExpression eval(HashMap<String,SymbolicExpression> variables) {$/;"	m	class:Clear
eval	src/expressions/command/Quit.java	/^  public SymbolicExpression eval(HashMap<String,SymbolicExpression> variables) {$/;"	m	class:Quit
eval	src/expressions/command/Vars.java	/^  public SymbolicExpression eval(HashMap<String,SymbolicExpression> variables) {$/;"	m	class:Vars
eval	src/expressions/unary/Cos.java	/^  public SymbolicExpression eval(HashMap<String,SymbolicExpression> variables) {$/;"	m	class:Cos
eval	src/expressions/unary/Exp.java	/^  public SymbolicExpression eval(HashMap<String,SymbolicExpression> variables) {$/;"	m	class:Exp
eval	src/expressions/unary/Log.java	/^  public SymbolicExpression eval(HashMap<String,SymbolicExpression> variables) {$/;"	m	class:Log
eval	src/expressions/unary/Negation.java	/^  public SymbolicExpression eval(HashMap<String,SymbolicExpression> variables) {$/;"	m	class:Negation
eval	src/expressions/unary/Sin.java	/^  public SymbolicExpression eval(HashMap<String, SymbolicExpression> variables) {$/;"	m	class:Sin
exceptions	src/exceptions/SyntaxErrorException.java	/^package exceptions;$/;"	p
exp	src/symbolic/Symbolic.java	/^  public static SymbolicExpression exp(SymbolicExpression arg) {$/;"	m	class:Symbolic
expression	src/expressions/atom/Variable.java	/^  private SymbolicExpression expression;$/;"	f	class:Variable	file:
expression	src/symbolic/Parser.java	/^  public SymbolicExpression expression() throws IOException {$/;"	m	class:Parser
expressions	src/expressions/SymbolicExpression.java	/^package expressions;$/;"	p
expressions.atom	src/expressions/atom/Atom.java	/^package expressions.atom;$/;"	p
expressions.atom	src/expressions/atom/Constant.java	/^package expressions.atom;$/;"	p
expressions.atom	src/expressions/atom/Variable.java	/^package expressions.atom;$/;"	p
expressions.binary	src/expressions/binary/Addition.java	/^package expressions.binary;$/;"	p
expressions.binary	src/expressions/binary/Assignment.java	/^package expressions.binary;$/;"	p
expressions.binary	src/expressions/binary/Binary.java	/^package expressions.binary;$/;"	p
expressions.binary	src/expressions/binary/Division.java	/^package expressions.binary;$/;"	p
expressions.binary	src/expressions/binary/Multiplication.java	/^package expressions.binary;$/;"	p
expressions.binary	src/expressions/binary/Subtraction.java	/^package expressions.binary;$/;"	p
expressions.command	src/expressions/command/Ans.java	/^package expressions.command;$/;"	p
expressions.command	src/expressions/command/Clear.java	/^package expressions.command;$/;"	p
expressions.command	src/expressions/command/Command.java	/^package expressions.command;$/;"	p
expressions.command	src/expressions/command/Quit.java	/^package expressions.command;$/;"	p
expressions.command	src/expressions/command/Vars.java	/^package expressions.command;$/;"	p
expressions.unary	src/expressions/unary/Cos.java	/^package expressions.unary;$/;"	p
expressions.unary	src/expressions/unary/Exp.java	/^package expressions.unary;$/;"	p
expressions.unary	src/expressions/unary/Log.java	/^package expressions.unary;$/;"	p
expressions.unary	src/expressions/unary/Negation.java	/^package expressions.unary;$/;"	p
expressions.unary	src/expressions/unary/Sin.java	/^package expressions.unary;$/;"	p
expressions.unary	src/expressions/unary/Unary.java	/^package expressions.unary;$/;"	p
factor	src/symbolic/Parser.java	/^  public SymbolicExpression factor() throws IOException {$/;"	m	class:Parser
getArgument	src/expressions/unary/Unary.java	/^  public SymbolicExpression getArgument() {$/;"	m	class:Unary
getExpression	src/expressions/atom/Variable.java	/^  public SymbolicExpression getExpression() {$/;"	m	class:Variable
getIdentifier	src/expressions/atom/Variable.java	/^  public String getIdentifier() {$/;"	m	class:Variable
getInstance	src/expressions/command/Clear.java	/^  public static Clear getInstance() {$/;"	m	class:Clear
getInstance	src/expressions/command/Quit.java	/^  public static Quit getInstance() {$/;"	m	class:Quit
getName	src/expressions/SymbolicExpression.java	/^  public abstract String getName();$/;"	m	class:SymbolicExpression
getName	src/expressions/atom/Constant.java	/^  public String getName() {$/;"	m	class:Constant
getName	src/expressions/atom/Variable.java	/^  public String getName() {$/;"	m	class:Variable
getName	src/expressions/binary/Addition.java	/^  public String getName() {$/;"	m	class:Addition
getName	src/expressions/binary/Assignment.java	/^  public String getName() {$/;"	m	class:Assignment
getName	src/expressions/binary/Division.java	/^  public String getName() {$/;"	m	class:Division
getName	src/expressions/binary/Multiplication.java	/^  public String getName() {$/;"	m	class:Multiplication
getName	src/expressions/binary/Subtraction.java	/^  public String getName() {$/;"	m	class:Subtraction
getName	src/expressions/command/Ans.java	/^  public String getName() {$/;"	m	class:Ans
getName	src/expressions/command/Clear.java	/^  public String getName() {$/;"	m	class:Clear
getName	src/expressions/command/Quit.java	/^  public String getName() {$/;"	m	class:Quit
getName	src/expressions/command/Vars.java	/^  public String getName() {$/;"	m	class:Vars
getName	src/expressions/unary/Cos.java	/^  public String getName() {$/;"	m	class:Cos
getName	src/expressions/unary/Exp.java	/^  public String getName() {$/;"	m	class:Exp
getName	src/expressions/unary/Log.java	/^  public String getName() {$/;"	m	class:Log
getName	src/expressions/unary/Negation.java	/^  public String getName() {$/;"	m	class:Negation
getName	src/expressions/unary/Sin.java	/^  public String getName() {$/;"	m	class:Sin
getValue	src/expressions/SymbolicExpression.java	/^  public double getValue() {$/;"	m	class:SymbolicExpression
getValue	src/expressions/atom/Constant.java	/^  public double getValue() {$/;"	m	class:Constant
identifier	src/expressions/atom/Variable.java	/^  private String identifier;$/;"	f	class:Variable	file:
identifier	src/symbolic/Parser.java	/^  private SymbolicExpression identifier() throws IOException {$/;"	m	class:Parser	file:
instance	src/expressions/command/Clear.java	/^  private static Clear instance = new Clear();$/;"	f	class:Clear	file:
instance	src/expressions/command/Quit.java	/^  private static Quit instance = new Quit();$/;"	f	class:Quit	file:
isAtomic	src/expressions/SymbolicExpression.java	/^  public boolean isAtomic() {$/;"	m	class:SymbolicExpression
isAtomic	src/expressions/atom/Atom.java	/^  public boolean isAtomic() {$/;"	m	class:Atom
isConstant	src/expressions/SymbolicExpression.java	/^  public boolean isConstant() {$/;"	m	class:SymbolicExpression
isConstant	src/expressions/atom/Constant.java	/^  public boolean isConstant() {$/;"	m	class:Constant
left	src/expressions/binary/Binary.java	/^  protected SymbolicExpression left;$/;"	f	class:Binary
log	src/symbolic/Symbolic.java	/^  public static SymbolicExpression log(SymbolicExpression arg) {$/;"	m	class:Symbolic
main	src/ParserDriver.java	/^  public static void main(String[] args) {$/;"	m	class:ParserDriver
mult	src/symbolic/Symbolic.java	/^  public static SymbolicExpression mult(SymbolicExpression left, SymbolicExpression right) {$/;"	m	class:Symbolic
name	src/expressions/SymbolicExpression.java	/^  protected String name;$/;"	f	class:SymbolicExpression
name	tests/TestAddition.java	/^    static String name = "Addition";$/;"	f	class:TestAddition
name	tests/TestAtom.java	/^    static String name = "Atom";$/;"	f	class:TestAtom
name	tests/TestDivision.java	/^    static String name = "Division";$/;"	f	class:TestDivision
name	tests/TestMultiplication.java	/^    static String name = "Multiplication";$/;"	f	class:TestMultiplication
name	tests/TestParser.java	/^    static String name = "Parser";$/;"	f	class:TestParser
name	tests/TestSubtraction.java	/^    static String name = "Subtraction";$/;"	f	class:TestSubtraction
name	tests/TestUnary.java	/^    static String name = "Unary";$/;"	f	class:TestUnary
negation	src/symbolic/Symbolic.java	/^  public static SymbolicExpression negation(SymbolicExpression arg) {$/;"	m	class:Symbolic
number	src/symbolic/Parser.java	/^  private SymbolicExpression number() throws IOException {$/;"	m	class:Parser	file:
primary	src/symbolic/Parser.java	/^  public SymbolicExpression primary() throws IOException {$/;"	m	class:Parser
printCount	tests/TestAddition.java	/^    public static void printCount() {$/;"	m	class:TestAddition
printCount	tests/TestAtom.java	/^    public static void printCount() {$/;"	m	class:TestAtom
printCount	tests/TestDivision.java	/^    public static void printCount() {$/;"	m	class:TestDivision
printCount	tests/TestMultiplication.java	/^    public static void printCount() {$/;"	m	class:TestMultiplication
printCount	tests/TestParser.java	/^    public static void printCount() {$/;"	m	class:TestParser
printCount	tests/TestSubtraction.java	/^    public static void printCount() {$/;"	m	class:TestSubtraction
printCount	tests/TestUnary.java	/^    public static void printCount() {$/;"	m	class:TestUnary
priority	src/expressions/SymbolicExpression.java	/^  public int priority() {$/;"	m	class:SymbolicExpression
priority	src/expressions/binary/Addition.java	/^  private final int priority = 1;$/;"	f	class:Addition	file:
priority	src/expressions/binary/Addition.java	/^  public int priority() {$/;"	m	class:Addition
priority	src/expressions/binary/Assignment.java	/^  private final int priority = 3;$/;"	f	class:Assignment	file:
priority	src/expressions/binary/Assignment.java	/^  public int priority() {$/;"	m	class:Assignment
priority	src/expressions/binary/Division.java	/^  private final int priority = 2;$/;"	f	class:Division	file:
priority	src/expressions/binary/Division.java	/^  public int priority() {$/;"	m	class:Division
priority	src/expressions/binary/Multiplication.java	/^  private final int priority = 2;$/;"	f	class:Multiplication	file:
priority	src/expressions/binary/Multiplication.java	/^  public int priority() {$/;"	m	class:Multiplication
priority	src/expressions/binary/Subtraction.java	/^  private final int priority = 1;$/;"	f	class:Subtraction	file:
priority	src/expressions/binary/Subtraction.java	/^  public int priority() {$/;"	m	class:Subtraction
priority	src/expressions/unary/Unary.java	/^  private final int priority = 4;$/;"	f	class:Unary	file:
priority	src/expressions/unary/Unary.java	/^  public int priority() {$/;"	m	class:Unary
pushBack	src/symbolic/Parser.java	/^  private void pushBack() throws IOException {$/;"	m	class:Parser	file:
readNumber	src/symbolic/Parser.java	/^  private double readNumber() throws IOException {$/;"	m	class:Parser	file:
readString	src/symbolic/Parser.java	/^  private String readString() throws IOException {$/;"	m	class:Parser	file:
right	src/expressions/binary/Binary.java	/^  protected SymbolicExpression right;$/;"	f	class:Binary
run	src/ParserDriver.java	/^  public static boolean run(Parser parser, HashMap<String,SymbolicExpression> variables) {$/;"	m	class:ParserDriver
run	tests/TestRunner.java	/^    public void run() {$/;"	m	class:TestRunner
setExpression	src/expressions/atom/Variable.java	/^  public void setExpression(SymbolicExpression value) {$/;"	m	class:Variable
setUp	src/symbolic/Parser.java	/^  private void setUp() {$/;"	m	class:Parser	file:
setup	tests/TestAddition.java	/^    public void setup() {$/;"	m	class:TestAddition
setup	tests/TestAtom.java	/^    public void setup() {$/;"	m	class:TestAtom
setup	tests/TestDivision.java	/^    public void setup() {$/;"	m	class:TestDivision
setup	tests/TestMultiplication.java	/^    public void setup() {$/;"	m	class:TestMultiplication
setup	tests/TestParser.java	/^    public void setup() {$/;"	m	class:TestParser
setup	tests/TestSubtraction.java	/^    public void setup() {$/;"	m	class:TestSubtraction
setup	tests/TestUnary.java	/^    public void setup() {$/;"	m	class:TestUnary
sin	src/symbolic/Symbolic.java	/^  public static SymbolicExpression sin(SymbolicExpression arg) {$/;"	m	class:Symbolic
sources	Makefile	/^sources = $(shell find . -type f -name '*.java')$/;"	m
start	src/symbolic/Parser.java	/^  public SymbolicExpression start() throws IOException {$/;"	m	class:Parser
statement	src/symbolic/Parser.java	/^  public SymbolicExpression statement() throws IOException {$/;"	m	class:Parser
sub	src/symbolic/Symbolic.java	/^  public static SymbolicExpression sub(SymbolicExpression left, SymbolicExpression right) {$/;"	m	class:Symbolic
symbolic	src/symbolic/Parser.java	/^package symbolic;$/;"	p
symbolic	src/symbolic/Symbolic.java	/^package symbolic;$/;"	p
term	src/symbolic/Parser.java	/^  public SymbolicExpression term() throws IOException {$/;"	m	class:Parser
testAdd	tests/TestAddition.java	/^    public void testAdd() {$/;"	m	class:TestAddition
testAddFromNegative	tests/TestAddition.java	/^    public void testAddFromNegative() {$/;"	m	class:TestAddition
testAddNegative	tests/TestAddition.java	/^    public void testAddNegative() {$/;"	m	class:TestAddition
testClear	tests/TestParser.java	/^    public void testClear() {$/;"	m	class:TestParser
testConstant	tests/TestAtom.java	/^    public void testConstant() {$/;"	m	class:TestAtom
testCos	tests/TestUnary.java	/^    public void testCos() {$/;"	m	class:TestUnary
testDivide	tests/TestDivision.java	/^    public void testDivide() {$/;"	m	class:TestDivision
testDivideDoubleNegative	tests/TestDivision.java	/^    public void testDivideDoubleNegative() {$/;"	m	class:TestDivision
testDivideNegative	tests/TestDivision.java	/^    public void testDivideNegative() {$/;"	m	class:TestDivision
testDivideZero	tests/TestDivision.java	/^    public void testDivideZero() {$/;"	m	class:TestDivision
testExp	tests/TestUnary.java	/^    public void testExp() {$/;"	m	class:TestUnary
testLog	tests/TestUnary.java	/^    public void testLog() {$/;"	m	class:TestUnary
testMultiply	tests/TestMultiplication.java	/^    public void testMultiply() {$/;"	m	class:TestMultiplication
testMultiplyByZero	tests/TestMultiplication.java	/^    public void testMultiplyByZero() {$/;"	m	class:TestMultiplication
testMultiplyVariable	tests/TestMultiplication.java	/^    public void testMultiplyVariable() {$/;"	m	class:TestMultiplication
testNegation	tests/TestUnary.java	/^    public void testNegation() {$/;"	m	class:TestUnary
testSin	tests/TestUnary.java	/^    public void testSin() {$/;"	m	class:TestUnary
testStart	tests/TestParser.java	/^    public void testStart() {$/;"	m	class:TestParser
testSubtract	tests/TestSubtraction.java	/^    public void testSubtract() {$/;"	m	class:TestSubtraction
testSubtractFromNegative	tests/TestSubtraction.java	/^    public void testSubtractFromNegative() {$/;"	m	class:TestSubtraction
testSubtractNegative	tests/TestSubtraction.java	/^    public void testSubtractNegative() {$/;"	m	class:TestSubtraction
testUnexpectedParenthesis	tests/TestParser.java	/^    public void testUnexpectedParenthesis() {$/;"	m	class:TestParser
testUnexpectedToken	tests/TestParser.java	/^    public void testUnexpectedToken() {$/;"	m	class:TestParser
testVariable	tests/TestAtom.java	/^    public void testVariable() {$/;"	m	class:TestAtom
toString	src/expressions/atom/Atom.java	/^  public String toString() {$/;"	m	class:Atom
toString	src/expressions/atom/Variable.java	/^  public String toString() {$/;"	m	class:Variable
toString	src/expressions/binary/Binary.java	/^  public String toString() {$/;"	m	class:Binary
toString	src/expressions/command/Ans.java	/^  public String toString() {$/;"	m	class:Ans
toString	src/expressions/command/Vars.java	/^  public String toString() {$/;"	m	class:Vars
toString	src/expressions/unary/Unary.java	/^  public String toString() {$/;"	m	class:Unary
tokenizer	src/symbolic/Parser.java	/^  private StreamTokenizer tokenizer;$/;"	f	class:Parser	file:
transport	Makefile	/^	$(JVM) -Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n ParserDriver$/;"	m
unaries	src/symbolic/Parser.java	/^  private TreeSet<String> unaries  = new TreeSet<String>();$/;"	f	class:Parser	file:
unary	src/symbolic/Parser.java	/^  public SymbolicExpression unary() throws IOException {$/;"	m	class:Parser
value	src/expressions/atom/Constant.java	/^  private double value;$/;"	f	class:Constant	file:
variables	src/ParserDriver.java	/^  public static HashMap<String, SymbolicExpression> variables() {$/;"	m	class:ParserDriver
variables	tests/TestAddition.java	/^    HashMap<String,SymbolicExpression> variables;$/;"	f	class:TestAddition
variables	tests/TestAtom.java	/^    HashMap<String,SymbolicExpression> variables;$/;"	f	class:TestAtom
variables	tests/TestDivision.java	/^    HashMap<String,SymbolicExpression> variables;$/;"	f	class:TestDivision
variables	tests/TestMultiplication.java	/^    HashMap<String,SymbolicExpression> variables;$/;"	f	class:TestMultiplication
variables	tests/TestParser.java	/^    HashMap<String,SymbolicExpression> variables;$/;"	f	class:TestParser
variables	tests/TestSubtraction.java	/^    HashMap<String,SymbolicExpression> variables;$/;"	f	class:TestSubtraction
variables	tests/TestUnary.java	/^    HashMap<String,SymbolicExpression> variables;$/;"	f	class:TestUnary
vars	src/expressions/command/Vars.java	/^  String vars;$/;"	f	class:Vars
